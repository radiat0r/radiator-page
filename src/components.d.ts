/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ResourceDetails } from "./scripts/connect-button";
import { WalletDataStateAccount } from "@radixdlt/radix-dapp-toolkit";
export { ResourceDetails } from "./scripts/connect-button";
export { WalletDataStateAccount } from "@radixdlt/radix-dapp-toolkit";
export namespace Components {
    interface AboutPage {
    }
    interface PortfolioChart {
        "chartdata": number[];
        "chartdates": string[];
        "label": string;
    }
    interface PortfolioPage {
    }
    interface ResourceDropdown {
        "resources": ResourceDetails[];
    }
    interface WalletDropdown {
        "wallets": WalletDataStateAccount[];
    }
}
export interface ResourceDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLResourceDropdownElement;
}
export interface WalletDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWalletDropdownElement;
}
declare global {
    interface HTMLAboutPageElement extends Components.AboutPage, HTMLStencilElement {
    }
    var HTMLAboutPageElement: {
        prototype: HTMLAboutPageElement;
        new (): HTMLAboutPageElement;
    };
    interface HTMLPortfolioChartElement extends Components.PortfolioChart, HTMLStencilElement {
    }
    var HTMLPortfolioChartElement: {
        prototype: HTMLPortfolioChartElement;
        new (): HTMLPortfolioChartElement;
    };
    interface HTMLPortfolioPageElement extends Components.PortfolioPage, HTMLStencilElement {
    }
    var HTMLPortfolioPageElement: {
        prototype: HTMLPortfolioPageElement;
        new (): HTMLPortfolioPageElement;
    };
    interface HTMLResourceDropdownElementEventMap {
        "resourceSelected": any;
    }
    interface HTMLResourceDropdownElement extends Components.ResourceDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLResourceDropdownElementEventMap>(type: K, listener: (this: HTMLResourceDropdownElement, ev: ResourceDropdownCustomEvent<HTMLResourceDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLResourceDropdownElementEventMap>(type: K, listener: (this: HTMLResourceDropdownElement, ev: ResourceDropdownCustomEvent<HTMLResourceDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLResourceDropdownElement: {
        prototype: HTMLResourceDropdownElement;
        new (): HTMLResourceDropdownElement;
    };
    interface HTMLWalletDropdownElementEventMap {
        "walletSelected": any;
    }
    interface HTMLWalletDropdownElement extends Components.WalletDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLWalletDropdownElementEventMap>(type: K, listener: (this: HTMLWalletDropdownElement, ev: WalletDropdownCustomEvent<HTMLWalletDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLWalletDropdownElementEventMap>(type: K, listener: (this: HTMLWalletDropdownElement, ev: WalletDropdownCustomEvent<HTMLWalletDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLWalletDropdownElement: {
        prototype: HTMLWalletDropdownElement;
        new (): HTMLWalletDropdownElement;
    };
    interface HTMLElementTagNameMap {
        "about-page": HTMLAboutPageElement;
        "portfolio-chart": HTMLPortfolioChartElement;
        "portfolio-page": HTMLPortfolioPageElement;
        "resource-dropdown": HTMLResourceDropdownElement;
        "wallet-dropdown": HTMLWalletDropdownElement;
    }
}
declare namespace LocalJSX {
    interface AboutPage {
    }
    interface PortfolioChart {
        "chartdata"?: number[];
        "chartdates"?: string[];
        "label"?: string;
    }
    interface PortfolioPage {
    }
    interface ResourceDropdown {
        "onResourceSelected"?: (event: ResourceDropdownCustomEvent<any>) => void;
        "resources"?: ResourceDetails[];
    }
    interface WalletDropdown {
        "onWalletSelected"?: (event: WalletDropdownCustomEvent<any>) => void;
        "wallets"?: WalletDataStateAccount[];
    }
    interface IntrinsicElements {
        "about-page": AboutPage;
        "portfolio-chart": PortfolioChart;
        "portfolio-page": PortfolioPage;
        "resource-dropdown": ResourceDropdown;
        "wallet-dropdown": WalletDropdown;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "about-page": LocalJSX.AboutPage & JSXBase.HTMLAttributes<HTMLAboutPageElement>;
            "portfolio-chart": LocalJSX.PortfolioChart & JSXBase.HTMLAttributes<HTMLPortfolioChartElement>;
            "portfolio-page": LocalJSX.PortfolioPage & JSXBase.HTMLAttributes<HTMLPortfolioPageElement>;
            "resource-dropdown": LocalJSX.ResourceDropdown & JSXBase.HTMLAttributes<HTMLResourceDropdownElement>;
            "wallet-dropdown": LocalJSX.WalletDropdown & JSXBase.HTMLAttributes<HTMLWalletDropdownElement>;
        }
    }
}
